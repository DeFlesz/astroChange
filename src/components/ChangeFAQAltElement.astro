---
interface Props {
    question: string,
}

const { question } = Astro.props;

---

<faq-element>
    <div class="main">
        <div class="question">
            <div class="header">
                <p>
                    {question}
                </p>
                <span class="material-symbols-outlined">
                    arrow_downward
                </span>
            </div>
        </div>
        <div class="answer">
            <p>
                <slot/>
            </p>
        </div>
    </div>
</faq-element>

<script>
    class ChangeFAQElement extends HTMLElement {
      constructor() {
        super();
  
        // Read the message from the data attribute.
        const answer = this.querySelector(".answer");
        const question = this.querySelector(".question");
        const button = this.querySelector('.main');
        button?.addEventListener('click', () => {
            answer?.classList.toggle("show");
            question?.classList.toggle("show");
            console.log("lolz");
        });
      }
    }
  
    customElements.define('faq-element', ChangeFAQElement);
  </script>
  <style>
    /* button {
        transform: translateX(calc(-1*var(--box-horizontal-padding)));
    } */

    .main {
        transition: all 0.5s;
        padding: var(--box-vertical-padding) var(--box-horizontal-padding);
    }
    
    .main:hover .question p {
        color: var(--primary);
    }

    /* .question {
        transition: all 0.5s linear;
    } */
    
    .header {
        user-select: none;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        gap: 1.25rem;
        align-items: center;
    }
    
    span {
        font-size: 1.5rem;
        border: 2px solid var(--primary);
        border-radius: 100%;
        padding: 0.375rem;
    }
    
    .answer {
        transition: all 0.5s;
        color: transparent;
        /* display: none; */
        padding: 0 var(--box-horizontal-padding);
        height: 0;
        overflow: hidden;
    }

    .question, span {
        transition: all 0.5s;
    }
    
    .answer.show {
        /* display: block; */
        padding: var(--box-vertical-padding) var(--box-horizontal-padding);
        height: fit-content;
    }

    .question.show p {
        /* margin-top: 0; */
        color: var(--primary);
    }

    .question.show span {
        transform: rotateZ(180deg);
    }
    
    .question input[type="checkbox"]:checked {
    
    }
    </style>