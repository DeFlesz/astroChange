---
interface Props {
    question: string,
}

const { question } = Astro.props;

---

<faq-element>
    <div class="main">
        <div class="question">
            <div class="header">
                <p>
                    {question}
                </p>
                <div class="svg-container">
                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.86364 0L10.1364 9.93452e-08L10.1364 13.6364L16.3864 7.38636L18 9L9 18L-2.14577e-06 9L1.61363 7.38636L7.86363 13.6364L7.86364 0Z" fill="#535E6B"/>
                    </svg>
                </div>
            </div>
        </div>
        <div class="answer">
            <p>
                <slot/>
            </p>
        </div>
    </div>
</faq-element>

<script>
    class ChangeFAQElement extends HTMLElement {
      constructor() {
        super();
  
        // Read the message from the data attribute.
        const answer = this.querySelector(".answer");
        const question = this.querySelector(".question");
        const button = this.querySelector('.main');
        button?.addEventListener('click', () => {
            answer?.classList.toggle("show");
            question?.classList.toggle("show");
            console.log("lolz");
        });
      }
    }
  
    customElements.define('faq-element', ChangeFAQElement);
  </script>
  <style>
    /* button {
        transform: translateX(calc(-1*var(--box-horizontal-padding)));
    } */

    .main {
        transition: all 0.5s;
        padding: var(--box-vertical-padding) var(--box-horizontal-padding);
    }
    
    .main:hover .question p {
        color: var(--primary);
    }
    
    .main:hover .svg-container {
        background-color: var(--primary);
    }

    .main:hover svg path {
        fill: var(--white2);
    }

    /* .question {
        transition: all 0.5s linear;
    } */
    
    .header {
        user-select: none;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        gap: 1.25rem;
        align-items: center;
    }
    
    .svg-container {
        box-sizing: border-box;
        display: flex;
        justify-content: center;
        align-items: center;
        min-width: 2.5rem;
        height: 2.5rem;
        font-size: 1.5rem;
        border: 2px solid var(--primary);
        border-radius: 100%;
    }
    
    .answer {
        transition: all 0.5s;
        color: transparent;
        /* display: none; */
        padding: 0 var(--box-horizontal-padding);
        height: 0;
        overflow: hidden;
    }

    .question, svg {
        transition: all 0.5s;
    }
    
    .answer.show {
        /* display: block; */
        padding: var(--box-vertical-padding) var(--box-horizontal-padding);
        height: fit-content;
    }

    .question.show p {
        /* margin-top: 0; */
        color: var(--primary);
    }

    .question.show svg {
        transform: rotateZ(180deg);
    }
    
    .question input[type="checkbox"]:checked {
    
    }
    </style>